# -*- coding: utf-8 -*-
"""modelado probas TAMAR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Eij74C3kgTv_VDbHNd4pXouiAOLpjR6d
"""

import pandas as pd
import requests
from datetime import timedelta, datetime
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def getDataV3(variableID):
    url = f"https://api.bcra.gob.ar/estadisticas/v3.0/Monetarias/{variableID}"
    r = requests.get(url, verify=False)
    return pd.DataFrame(r.json().get('results')).set_index('fecha')

events = {
    'TTM26': datetime(2026, 3, 16),
    'TTJ26': datetime(2026, 6, 30),
    'TTS26': datetime(2026, 9, 15),
    'TTD26': datetime(2026, 12, 15)
}

"""# Modelado PDF TAMAR a dic26"""

tamar_tea = getDataV3(variableID=45)['valor'] / 100   # ID=45 es la TAMAR
tamar_tea.index = pd.to_datetime(tamar_tea.index)
tamar_tea = tamar_tea.sort_index()
tamar_tea = tamar_tea.loc[tamar_tea.index > '2025-01-15']
tamar_tem_spot = ((1 + tamar_tea)**(1/12) - 1)
tamar_tem = tamar_tem_spot.to_frame(name='tamar_tem_spot')

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import lognorm
from scipy.optimize import minimize

target_mean = 0.0143 # media REM a dic 26
target_prob = 0.0244 # outlier_prob caso max REM 1/41
threshold = 0.0271 # outlier_value REM max a dic26
min_val = 0.0049 # min: riesgo pais 200 bps + FR 400 bps

def loss(params):
    mu, sigma = params
    dist = lognorm(s=sigma, scale=np.exp(mu))
    mean = dist.mean()
    prob = 1 - dist.cdf(threshold)
    penal_mean = (mean - target_mean)**2
    penal_prob = max(0, target_prob - prob)**2
    return penal_mean + 10 * penal_prob

res = minimize(loss, x0=[np.log(target_mean), 0.5], bounds=[(None, None), (1e-3, 2)])

mu_opt, sigma_opt = res.x
dist = lognorm(s=sigma_opt, scale=np.exp(mu_opt))

x = np.linspace(min_val, 0.07, 1000)
pdf = dist.pdf(x)
pdf[x < min_val] = 0

plt.plot(x, pdf)
plt.title('PDF tasa TAMAR')
plt.xlabel('Tasa')
plt.ylabel('Densidad')
plt.grid(True)


print(f"Params de la lognormal: mu: {mu_opt:.4f}, sigma: {sigma_opt:.4f}")
print(f"Mean of the fitted lognormal distribution: {dist.mean():.6f}")
print(f"Std Dev of the fitted lognormal distribution: {dist.std():.6f}")
plt.show()


# setear N como cantidad de escenarios discretos a modelar, MAX como maximo valor posible de TAMAR a dic26 escenario caos total
N, MAX = 15, 0.055
edges = np.linspace(min_val, MAX, N + 1)
centers = 0.5 * (edges[:-1] + edges[1:])
probs = dist.cdf(edges[1:]) - dist.cdf(edges[:-1])

df = pd.DataFrame({'TAMAR_DIC_26_pct': centers, 'proba_pct': probs}).mul(100).round(1)
print(df)

# probas de cada tamar a dic26
df.set_index('TAMAR_DIC_26_pct')['proba_pct'].plot(kind='bar')
plt.title('Probabilidad Discretizada de TAMAR DIC 26')
plt.xlabel('TAMAR MENSUAL DIC 26 (%)')
plt.ylabel('Probabilidad (%)')
plt.tight_layout()
plt.show()
